// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
  // output   = "  output   = "./generated/client""
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// ROLE & PERMISSION SYSTEM (RBAC)
// ============================================

model Role {
  id          String  @id @default(cuid())
  name        String  @unique // ADMIN, EDITOR, AUTHOR, USER
  description String?
  level       Int     @default(0) // 0=USER, 50=AUTHOR, 80=EDITOR, 100=ADMIN
  isSystem    Boolean @default(false) // System roles không được xóa
  color       String? // Màu hiển thị badge

  permissions RolePermission[]
  users       User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([level])
}

model Permission {
  id          String  @id @default(cuid())
  name        String  @unique // posts:create, posts:publish, users:manage
  resource    String // posts, users, comments, media, settings
  action      String // create, read, update, delete, manage, publish
  description String?

  roles RolePermission[]

  createdAt DateTime @default(now())

  @@unique([resource, action])
  @@index([resource])
  @@index([name])
}

model RolePermission {
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
}

// ============================================
// USER MANAGEMENT & AUTHENTICATION
// ============================================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String? // Nullable for OAuth users
  image         String?
  bio           String?   @db.Text
  username      String?   @unique

  // Profile enhancements
  location String?
  website  String?
  twitter  String?
  github   String?
  linkedin String?

  // User settings
  language           String  @default("vi")
  timezone           String  @default("Asia/Ho_Chi_Minh")
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(true)

  // RBAC - Thay enum bằng relation
  roleId String?
  role   Role?   @relation(fields: [roleId], references: [id])

  status UserStatus @default(ACTIVE)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Relations
  accounts            Account[]
  sessions            Session[]
  posts               Post[]
  comments            Comment[]
  snippets            Snippet[]
  favorites           Favorite[]
  postViews           PostView[]
  notifications       Notification[]
  emailSubscribers    EmailSubscription[]  @relation("Author")
  subscriptions       EmailSubscription[]  @relation("Subscriber")
  chatSessions        ChatSession[]
  activityLogs        ActivityLog[]
  postAccess          PostAccess[]
  uploadedMedia       Media[]
  passwordResetTokens PasswordResetToken[]
  ContactMessage      ContactMessage[]

  @@index([username])
  @@index([email])
  @@index([roleId])
  @@index([status])
}

model VerificationToken {
  identifier String // Email address
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([token])
  @@index([expires])
  @@index([identifier])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expires])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String // google, github, facebook
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  BANNED
  PENDING
}

// ============================================
// BLOG POST SYSTEM
// ============================================

model Post {
  id            String        @id @default(cuid())
  title         String
  slug          String        @unique
  excerpt       String?       @db.Text
  content       String        @db.Text
  contentFormat ContentFormat @default(MARKDOWN)

  metaTitle       String?
  metaDescription String?  @db.Text
  metaKeywords    String[]
  ogImage         String?

  type       PostType       @default(ARTICLE)
  status     PostStatus     @default(DRAFT)
  visibility PostVisibility @default(PUBLIC)

  isPasswordProtected Boolean @default(false)
  passwordHash        String?

  isFeatured    Boolean @default(false)
  isPinned      Boolean @default(false)
  featuredImage String?

  publishedAt  DateTime?
  scheduledFor DateTime?

  viewCount    Int  @default(0)
  likeCount    Int  @default(0)
  commentCount Int  @default(0)
  shareCount   Int  @default(0)
  readingTime  Int?

  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author           User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category         Category?          @relation(fields: [categoryId], references: [id])
  categoryId       String?
  tags             PostTag[]
  comments         Comment[]
  media            PostMedia[]
  views            PostView[]
  favorites        Favorite[]
  language         String             @default("vi")
  translations     PostTranslation[]
  allowedUsers     PostAccess[]
  // @@fulltext([title, content])
  TranslationQueue TranslationQueue[]

  @@index([slug])
  @@index([authorId])
  @@index([categoryId])
  @@index([status])
  @@index([visibility])
  @@index([type])
  @@index([publishedAt])
  @@index([isFeatured])
}

model PostTranslation {
  id              String  @id @default(cuid())
  postId          String
  language        String
  title           String
  excerpt         String? @db.Text
  content         String  @db.Text
  metaTitle       String?
  metaDescription String? @db.Text
  slug            String  @unique

  isAITranslated Boolean  @default(false)
  translatedBy   String?
  translatedAt   DateTime @default(now())

  // Cache management cho tối ưu storage
  accessCount    Int       @default(0)
  lastAccessedAt DateTime  @default(now())
  cacheUntil     DateTime?
  quality        Float?    @default(0.8)

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, language])
  @@index([postId])
  @@index([language])
  @@index([slug])
  @@index([accessCount])
  @@index([lastAccessedAt])
}

model PostAccess {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  grantedBy String?
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  slug        String  @unique
  description String? @db.Text
  icon        String?
  color       String?
  parentId    String?
  order       Int     @default(0)
  isActive    Boolean @default(true)
  language    String  @default("vi")

  parent       Category?             @relation("CategoryTree", fields: [parentId], references: [id])
  children     Category[]            @relation("CategoryTree")
  posts        Post[]
  translations CategoryTranslation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([parentId])
}

model CategoryTranslation {
  id          String  @id @default(cuid())
  categoryId  String
  language    String
  name        String
  description String? @db.Text

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, language])
  @@index([categoryId])
}

model Tag {
  id    String  @id @default(cuid())
  name  String  @unique
  slug  String  @unique
  type  TagType @default(TOPIC)
  color String?

  posts    PostTag[]
  snippets SnippetOnTag[]
  // translations TagTranslation[]

  createdAt DateTime @default(now())

  @@index([slug])
  @@index([type])
}

// model TagTranslation {
//   id       String @id @default(cuid())
//   tagId    String
//   language String
//   name     String

//   tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)

//   @@unique([tagId, language])
//   @@index([tagId])
// }

model PostTag {
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@index([postId])
  @@index([tagId])
}

enum PostType {
  ARTICLE
  GALLERY
  VIDEO
  SNIPPET
  DOCUMENT
  PORTFOLIO
  LINK
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
  DELETED
}

enum PostVisibility {
  PUBLIC
  UNLISTED
  PRIVATE
  PASSWORD
  RESTRICTED
}

enum ContentFormat {
  MARKDOWN
  HTML
  RICH_TEXT
}

enum TagType {
  LANGUAGE
  TOPIC
  TECHNOLOGY
  CATEGORY
}

// ============================================
// MEDIA MANAGEMENT
// ============================================

model Media {
  id           String @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  width        Int?
  height       Int?
  duration     Int?

  url             String
  thumbnailUrl    String?
  storageKey      String  @unique
  storageProvider String  @default("s3")
  bucket          String?

  type MediaType

  alt      String?
  caption  String? @db.Text
  metadata Json?

  uploadedById String
  uploadedBy   User   @relation(fields: [uploadedById], references: [id])

  status      MediaStatus @default(PROCESSING)
  processedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts PostMedia[]

  @@index([uploadedById])
  @@index([type])
  @@index([status])
  @@index([storageKey])
}

model PostMedia {
  id      String @id @default(cuid())
  postId  String
  mediaId String
  order   Int    @default(0)

  post  Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([postId, mediaId])
  @@index([postId])
  @@index([mediaId])
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  ARCHIVE
  OTHER
}

enum MediaStatus {
  PROCESSING
  READY
  FAILED
  DELETED
}

// ============================================
// COMMENTS & INTERACTIONS
// ============================================

model Comment {
  id       String  @id @default(cuid())
  content  String  @db.Text
  postId   String
  authorId String
  parentId String?

  status   CommentStatus @default(PUBLISHED)
  isEdited Boolean       @default(false)

  likeCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author  User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentReplies")

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
  @@index([status])
}

enum CommentStatus {
  PUBLISHED
  PENDING
  SPAM
  DELETED
}

model PostView {
  id        String   @id @default(cuid())
  postId    String
  userId    String?
  ipAddress String?
  userAgent String?
  referrer  String?
  viewedAt  DateTime @default(now())

  post Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([postId])
  @@index([userId])
  @@index([viewedAt])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  snippetId String?
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  snippet Snippet? @relation(fields: [snippetId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, snippetId])
  @@index([userId])
  @@index([postId])
  @@index([snippetId])
}

model ContactMessage {
  id      String @id @default(cuid())
  name    String
  email   String
  subject String
  message String @db.Text

  status ContactStatus @default(UNREAD)

  // Optional: Link to user if they're logged in
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([status])
  @@index([createdAt])
}

enum ContactStatus {
  UNREAD
  READ
  RESPONDED
  ARCHIVED
}

// ============================================
// CODE SNIPPETS
// ============================================

model Language {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?  @db.Text
  icon        String?
  color       String?
  fileExt     String[]
  popularity  Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  snippets Snippet[]

  @@index([slug])
  @@index([popularity])
  @@index([isActive])
}

model Snippet {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  code        String   @db.Text
  languageId  String
  complexity  String?
  isPublic    Boolean  @default(true)
  viewCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  slug        String   @unique

  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  language  Language       @relation(fields: [languageId], references: [id], onDelete: Restrict)
  tags      SnippetOnTag[]
  favorites Favorite[]

  @@index([userId])
  @@index([languageId])
  @@index([slug])
  @@index([isPublic])
  @@index([createdAt])
}

model SnippetOnTag {
  snippet   Snippet @relation(fields: [snippetId], references: [id], onDelete: Cascade)
  snippetId String
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     String

  @@id([snippetId, tagId])
  @@index([snippetId])
  @@index([tagId])
}

// ============================================
// NOTIFICATION SYSTEM
// ============================================

model Notification {
  id      String           @id @default(cuid())
  userId  String
  type    NotificationType
  title   String
  message String           @db.Text
  link    String?

  data Json?

  isRead Boolean   @default(false)
  readAt DateTime?

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

enum NotificationType {
  NEW_POST
  NEW_COMMENT
  COMMENT_REPLY
  NEW_FOLLOWER
  POST_LIKED
  MENTION
  SYSTEM
}

model EmailSubscription {
  id       String  @id @default(cuid())
  email    String
  userId   String?
  authorId String

  isActive Boolean @default(true)
  token    String  @unique @default(cuid())

  frequency  EmailFrequency @default(IMMEDIATE)
  categories String[]

  subscribedAt   DateTime  @default(now())
  unsubscribedAt DateTime?

  user   User? @relation("Subscriber", fields: [userId], references: [id], onDelete: SetNull)
  author User  @relation("Author", fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([email, authorId])
  @@index([userId])
  @@index([authorId])
  @@index([isActive])
  @@index([token])
}

enum EmailFrequency {
  IMMEDIATE
  DAILY
  WEEKLY
  MONTHLY
}

model EmailLog {
  id        String      @id @default(cuid())
  to        String
  subject   String
  template  String
  data      Json?
  status    EmailStatus @default(PENDING)
  error     String?     @db.Text
  sentAt    DateTime?
  createdAt DateTime    @default(now())

  @@index([status])
  @@index([createdAt])
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
}

// ============================================
// AI CHATBOT SYSTEM
// ============================================

model ChatSession {
  id     String  @id @default(cuid())
  userId String?
  title  String?

  context Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  messages ChatMessage[]

  @@index([userId])
  @@index([createdAt])
}

model ChatMessage {
  id        String      @id @default(cuid())
  sessionId String
  role      MessageRole
  content   String      @db.Text

  model    String?
  tokens   Int?
  metadata Json?

  createdAt DateTime @default(now())

  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([createdAt])
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

// Tối ưu cho 1GB: Không lưu embeddings trong PostgreSQL
// Dùng external vector DB (Pinecone free tier: 100k vectors)
model ContentIndex {
  id          String @id @default(cuid())
  contentType String
  contentId   String
  content     String @db.Text

  keywords String[]
  summary  String?  @db.Text

  vectorId String? // Reference to Pinecone/Weaviate

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([contentType, contentId])
  @@index([vectorId])
}

// ============================================
// ACTIVITY LOGGING với Retention Policy
// ============================================

model ActivityLog {
  id       String  @id @default(cuid())
  userId   String?
  action   String
  entity   String
  entityId String?

  ipAddress String?
  userAgent String?
  metadata  Json?

  // Retention management
  retentionDays Int      @default(30)
  importance    LogLevel @default(INFO)

  createdAt DateTime @default(now())
  expiresAt DateTime // Auto-calculated

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([entity])
  @@index([createdAt])
  @@index([expiresAt])
  @@index([importance])
}

enum LogLevel {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}

// ============================================
// SYSTEM CONFIGURATION
// ============================================

// Quản lý cấu hình hệ thống
model SystemConfig {
  id          String     @id @default(cuid())
  key         String     @unique // vd: "app.name", "rate_limit.max_per_hour"
  value       String // Lưu dạng JSON string
  type        ConfigType // STRING, NUMBER, BOOLEAN, JSON, DURATION
  category    String // app, email, rate_limit, security, feature_flags
  description String?
  isPublic    Boolean    @default(false) // Có thể expose cho client không
  updatedAt   DateTime   @updatedAt
  createdAt   DateTime   @default(now())

  @@index([key])
  @@index([category])
  @@index([isPublic])
  @@map("system_configs")
}

enum ConfigType {
  STRING
  NUMBER
  BOOLEAN
  JSON
  DURATION // vd: "5m", "1h", "24h"
}

// Lưu lịch sử thay đổi config (audit log)
model ConfigHistory {
  id        String   @id @default(cuid())
  configKey String
  oldValue  String?
  newValue  String
  changedBy String? // userId nếu có auth
  reason    String? // Lý do thay đổi
  createdAt DateTime @default(now())

  @@index([configKey])
  @@index([createdAt])
  @@map("config_histories")
}

// Feature flags cho A/B testing hoặc gradual rollout
model FeatureFlag {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  enabled     Boolean  @default(false)
  percentage  Int      @default(100) // 0-100, cho phép rollout từ từ
  rules       Json? // Custom rules: { "userIds": [...], "country": "VN" }
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("feature_flags")
}

// App metadata (logo, theme, manifest)
model AppMetadata {
  id          String   @id @default(cuid())
  locale      String   @default("en") // en, vi
  name        String
  shortName   String
  description String
  keywords    String[] // Array of keywords
  themeColor  String   @default("#000000")
  bgColor     String   @default("#ffffff")
  iconUrl     String? // URL to icon
  logoUrl     String? // URL to logo
  manifest    Json? // Full PWA manifest
  seo         Json? // SEO metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([locale])
  @@map("app_metadata")
}

model Translation {
  id        String @id @default(cuid())
  key       String
  language  String
  value     String @db.Text
  namespace String @default("common")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([key, language, namespace])
  @@index([language])
  @@index([namespace])
}

// ============================================
// Translation Queue cho AI Translation
// ============================================

model TranslationQueue {
  id          String      @id @default(cuid())
  postId      String
  language    String
  priority    Int         @default(0)
  status      QueueStatus @default(PENDING)
  attempts    Int         @default(0)
  error       String?     @db.Text
  createdAt   DateTime    @default(now())
  processedAt DateTime?
  post        Post        @relation(fields: [postId], references: [id])

  @@unique([postId, language])
  @@index([status, priority])
  @@index([createdAt])
}

enum QueueStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
