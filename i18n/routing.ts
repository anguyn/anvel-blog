import { createNavigation } from 'next-intl/navigation';
import { defineRouting } from 'next-intl/routing';
import { i18n, LocaleProps } from './config';

export const routing = defineRouting({
  locales: i18n.locales,
  defaultLocale: i18n.defaultLocale,
  localePrefix: 'as-needed',
  localeDetection: false,
});

export const { Link, redirect, usePathname, useRouter } =
  createNavigation(routing);

export interface DictionaryStructure {
  common: {
    pageNotFound: string;
    share: string;
    save: string;
    saved: string;
    edit: string;
    delete: string;
    views: string;
    saves: string;
    code: string;
    explore: string;
    snippets: string;
    tags: string;
    search: string;
    create: string;
    description: string;
    product: string;
    createSnippet: string;
    legal: string;
    privacy: string;
    terms: string;
    cookiePolicy: string;
    copyright: string;
    previous: string;
    next: string;
    somethingWrong: string;
    accessDenied: string;
    serverError: string;
    invalidFields: string;
    unauthorized: string;
    forbidden: string;
    notFound: string;
    validationError: string;
    success: string;
    about: string;
    blog: string;
    contact: string;
    close: string;
    learnMore: string;
    readMore: string;
    backHome: string;
    company: string;
    submit: string;
    cancel: string;
    loading: string;
    favoriteAdded: string;
    favoriteRemoved: string;
    favoriteError: string;
    logoutSuccess: string;
  };
  home: {
    title: string;
    pageDescription: string;
    heroTitle: string;
    heroTitleHighlight: string;
    heroDescription: string;
    createSnippet: string;
    exploreSnippets: string;
    instantAnalysisTitle: string;
    instantAnalysisDesc: string;
    communityDrivenTitle: string;
    communityDrivenDesc: string;
    ctaTitle: string;
    ctaDescription: string;
    getStartedFree: string;
    badge: string;
    readBlog: string;
    scrollDown: string;
    featuresTitle: string;
    featuresSubtitle: string;
    codeSnippetsTitle: string;
    codeSnippetsDesc: string;
    personalBlogTitle: string;
    personalBlogDesc: string;
    communityTitle: string;
    communityDesc: string;
    howItWorksTitle: string;
    howItWorksSubtitle: string;
    step1Title: string;
    step1Desc: string;
    step2Title: string;
    step2Desc: string;
    step3Title: string;
    step3Desc: string;
    statsTitle: string;
    snippetsCount: string;
    usersCount: string;
    articlesCount: string;
    testimonialTitle: string;
    testimonialQuote: string;
    testimonialAuthor: string;
    testimonialRole: string;
    getStarted: string;
  };
  newsletter: {
    title: string;
    description: string;
    emailPlaceholder: string;
    subscribe: string;
    subscribing: string;
    subscribed: string;
    successMessage: string;
    errorMessage: string;
    invalidEmail: string;
    privacy: string;
    feature1: string;
    feature2: string;
    feature3: string;
  };
  about: {
    title: string;
    pageDescription: string;
    heroTitle: string;
    heroSubtitle: string;
    storyTitle: string;
    storySubtitle: string;
    storyP1: string;
    storyP2: string;
    storyP3: string;
    missionTitle: string;
    missionDesc: string;
    visionTitle: string;
    visionDesc: string;
    valuesTitle: string;
    valuesDesc: string;
    creatorTitle: string;
    creatorName: string;
    creatorRole: string;
    creatorBio: string;
    github: string;
    linkedin: string;
    contactMe: string;
    techTitle: string;
    techSubtitle: string;
    ctaTitle: string;
    ctaSubtitle: string;
    getStarted: string;
    contactUs: string;
  };
  privacy: {
    title: string;
    pageDescription: string;
    lastUpdated: string;
    heroTitle: string;
    heroSubtitle: string;
    infoCollectTitle: string;
    infoCollectDesc: string;
    infoItem1: string;
    infoItem2: string;
    infoItem3: string;
    infoItem4: string;
    infoItem5: string;
    howUseTitle: string;
    howUseDesc: string;
    useItem1: string;
    useItem2: string;
    useItem3: string;
    useItem4: string;
    useItem5: string;
    sharingTitle: string;
    sharingDesc: string;
    shareItem1: string;
    shareItem2: string;
    shareItem3: string;
    shareItem4: string;
    securityTitle: string;
    securityDesc: string;
    rightsTitle: string;
    rightsDesc: string;
    rightItem1: string;
    rightItem2: string;
    rightItem3: string;
    rightItem4: string;
    rightItem5: string;
    contactTitle: string;
    contactDesc: string;
    contactEmail: string;
  };
  terms: {
    title: string;
    pageDescription: string;
    lastUpdated: string;
    heroTitle: string;
    heroSubtitle: string;
    acceptanceTitle: string;
    acceptanceDesc: string;
    serviceTitle: string;
    serviceDesc: string;
    accountTitle: string;
    accountDesc: string;
    accountItem1: string;
    accountItem2: string;
    accountItem3: string;
    accountItem4: string;
    contentTitle: string;
    contentDesc: string;
    prohibitedTitle: string;
    prohibitedDesc: string;
    prohibitedItem1: string;
    prohibitedItem2: string;
    prohibitedItem3: string;
    prohibitedItem4: string;
    prohibitedItem5: string;
    moderationTitle: string;
    moderationDesc: string;
    disclaimerTitle: string;
    disclaimerDesc: string;
    contactTitle: string;
    contactDesc: string;
    contactEmail: string;
  };
  cookie: {
    title: string;
    pageDescription: string;
    lastUpdated: string;
    heroTitle: string;
    heroSubtitle: string;
    whatTitle: string;
    whatDesc: string;
    essentialTitle: string;
    essentialDesc: string;
    essentialItem1: string;
    essentialItem2: string;
    essentialItem3: string;
    functionalTitle: string;
    functionalDesc: string;
    functionalItem1: string;
    functionalItem2: string;
    functionalItem3: string;
    analyticsTitle: string;
    analyticsDesc: string;
    analyticsItem1: string;
    analyticsItem2: string;
    analyticsItem3: string;
    managingTitle: string;
    managingDesc: string;
    managingItem1: string;
    managingItem2: string;
    managingItem3: string;
    contactTitle: string;
    contactDesc: string;
    contactEmail: string;
  };
  contact: {
    title: string;
    pageDescription: string;
    heroTitle: string;
    heroSubtitle: string;
    formTitle: string;
    nameLabel: string;
    namePlaceholder: string;
    emailLabel: string;
    emailPlaceholder: string;
    subjectLabel: string;
    subjectPlaceholder: string;
    messageLabel: string;
    messagePlaceholder: string;
    sendButton: string;
    sending: string;
    successTitle: string;
    successMessage: string;
    errorMessage: string;
    infoTitle: string;
    emailTitle: string;
    emailValue: string;
    socialTitle: string;
    responseTime: string;
  };
  auth: {
    invalidFields: string;
    missingCredentials: string;
    invalidCredentials: string;
    invalidEmail: string;
    emailExists: string;
    accountBanned: string;
    accountSuspended: string;
    emailNotVerified: string;
    accessDenied: string;
    serverError: string;
    loginSuccess: string;
    logoutSuccess: string;
    logoutFailed: string;
    registerSuccess: string;
    registerFailed: string;
    registerSuccessLoginFailed: string;
    resetEmailSent: string;
    resetRequestFailed: string;
    invalidToken: string;
    passwordResetSuccess: string;
    resetFailed: string;
    passwordsNotMatch: string;
    passwordTooShort: string;
    nameTooShort: string;
    tokenRequired: string;
    tokenInvalid: string;
    tokenExpired: string;
    userNotFound: string;
    alreadyVerified: string;
    emailVerified: string;
    emailAlreadyVerified: string;
    verificationFailed: string;
    resendSuccess: string;
    resendFailed: string;
    rateLimit: string;
    rateLimitMessage: string;
    emailRequired: string;
    ifEmailExists: string;
    welcomeEmailFailed: string;
    passwordReset: {
      tokenRequired: string;
      invalidOrExpired: string;
      tokenAndPasswordRequired: string;
      passwordTooWeak: string;
      accountNotActive: string;
      success: string;
      verifyFailed: string;
      resetFailed: string;
      validation: {
        minLength: string;
        uppercase: string;
        lowercase: string;
        number: string;
        specialChar: string;
      };
    };
    verifyEmail: {
      title: string;
      description: string;
      verifying: string;
      verifyingDescription: string;
      redirectingLogin: string | ((params: { second: string }) => string);
      success: string;
      successMessage: string;
      error: string;
      expired: string;
      expiredMessage: string;
      invalidToken: string;
      alreadyVerified: string;
      resendEmail: string;
      resending: string;
      resendSuccess: string;
      resendError: string;
      rateLimitError: string;
      waitBeforeResend: string;
      goToLogin: string;
    };
    forgotPassword: {
      title: string;
      description: string;
      subtitle: string;
      email: string;
      emailPlaceholder: string;
      sendResetLink: string;
      sending: string;
      success: string;
      successMessage: string;
      error: string;
      invalidEmail: string;
      backToLogin: string;
      resendIn: string;
      canResendNow: string;
      resetLinkExprire: string;
    };
    resetPassword: {
      title: string;
      description: string;
      subtitle: string;
      password: string;
      passwordPlaceholder: string;
      confirmPassword: string;
      confirmPasswordPlaceholder: string;
      resetPassword: string;
      resetting: string;
      success: string;
      successMessage: string;
      error: string;
      expired: string;
      expiredMessage: string;
      invalidToken: string;
      passwordTooWeak: string;
      passwordsDontMatch: string;
      goToLogin: string;
      expiresIn: string;
      passwordRequirements: string;
      requirement8Chars: string;
      requirementUppercase: string;
      requirementLowercase: string;
      requirementNumber: string;
      requirementSpecial: string;
      invalidLink: string;
      redirectingLogin: string;
      requestNewLink: string;
      requestNewLinkDes: string;
    };
    oauthPasswordError: string;
    invalidCurrentPassword: string;
    samePassword: string;
    passwordUpdated: string;
  };
  login: {
    title: string;
    subTitle: string;
    pageDescription: string;
    email: string;
    emailPlaceholder: string;
    password: string;
    passwordPlaceholder: string;
    rememberMe: string;
    forgotPassword: string;
    submitButton: string;
    welcomeBack: string;
    signInTitle: string;
    dontHaveAccount: string;
    signUp: string;
    invalidCredentials: string;
    loginSuccess: string;
    somethingWentWrong: string;
    invalidEmail: string;
    passwordMinLength: string;
    followTerms: string;
    tos: string;
    pp: string;
    orContinueWith: string;
    accountNotVerified: string;
    accountNotVerifiedMessage: string;
    accountSuspended: string;
    accountSuspendedMessage: string;
    accountBanned: string;
    accountBannedMessage: string;
    resendVerification: string;
    resending: string;
    resendSuccess: string;
    waitBeforeResend: string;
    resendError: string;
    twoFactorTitle: string;
    twoFactorDescription: string;
    twoFactorCode: string;
    twoFactorCodePlaceholder: string;
    backupCode: string;
    backupCodePlaceholder: string;
    useBackupCode: string;
    useAuthenticatorCode: string;
    backToLogin: string;
    verify: string;
    invalid2FACode: string;
    twoFactorRequired: string;
    twoFactorError: string;
    turnstileError: string;
    turnstileExpire: string;
    confirm2FALeave: string;
    invalidBackupCode: string;
    turnstileWaiting: string;
  };
  register: {
    title: string;
    subTitle: string;
    signUpTitle: string;
    pageDescription: string;
    createAccount: string;
    name: string;
    namePlaceholder: string;
    email: string;
    emailPlaceholder: string;
    gender: string;
    birthday: string;
    password: string;
    passwordPlaceholder: string;
    confirmPassword: string;
    confirmPasswordPlaceholder: string;
    male: string;
    female: string;
    alreadyHaveAccount: string;
    signIn: string;
    nameMinLength: string;
    invalidEmail: string;
    passwordMinLength: string;
    passwordsDontMatch: string;
    registrationFailed: string;
    accountCreatedSuccess: string;
    somethingWentWrong: string;
    followTerms: string;
    tos: string;
    pp: string;
    passwordRequirements: string;
    requirement8Chars: string;
    requirementUppercase: string;
    requirementLowercase: string;
    requirementNumber: string;
    requirementSpecial: string;
    verificationEmailSent: string;
    verificationEmailSentMessage: string;
    checkYourEmail: string;
    resendVerificationEmail: string;
    resending: string;
    closeDialog: string;
  };
  favorites: {
    title: string;
    pageDescription: string;
    savedSnippet: string;
    pluralSuffix: string;
    noFavoritesYet: string;
    noFavoritesDescription: string;
  };
  snippets: {
    notFound: string;
    timeComplexity: string;
    estimatedComplexity: string;
    complexityDisclaimer: string;
    aboutAuthor: string;
    viewProfile: string;
    loginToSave: string;
    title: string;
    pageDescription: string;
    allSnippets: string;
    searchResults: string;
    snippetsFound: string;
    snippetFound: string;
    mostRecent: string;
    mostViewed: string;
    mostLiked: string;
    language: string;
    tag: string;
    search: string;
    noSnippetsFound: string;
    createTitle: string;
    createDescription: string;
  };
  search: {
    description: string;
    search: string;
    searchResults: string;
    foundResults: string;
    result: string;
    results: string;
    for: string;
    all: string;
    snippets: string;
    tags: string;
    users: string;
    enterSearchQuery: string;
    noResultsFound: string;
    snippetsCount: string;
  };
  tags: {
    title: string;
    pageDescription: string;
    browseByTags: string;
    description: string;
    topics: string;
    languages: string;
    snippet: string;
    snippets: string;
    noTopicsFound: string;
    noLanguagesFound: string;
    notFound: string;
    browseSnippets: string;
    explore: string;
    codeSnippetsTagged: string;
    language: string;
    topic: string;
    found: string;
    noSnippetsFound: string;
  };
  userProfile: {
    notFound: string;
    profile: string;
    viewProfile: string;
    codeSnippetsAndProfile: string;
    editProfile: string;
    joined: string;
    snippet: string;
    snippets: string;
    snippetsLabel: string;
    views: string;
    favorites: string;
    languages: string;
    topLanguages: string;
    mySnippets: string;
    publicSnippets: string;
    createNew: string;
    noSnippetsYet: string;
    noPublicSnippets: string;
    settings: string;
  };
  user: {
    notFound: string;
    unauthorized: string;
    fetchFailed: string;
    updateFailed: string;
    deleteFailed: string;
    deleteSuccess: string;
    currentPasswordRequired: string;
    incorrectPassword: string;
    noPassword: string;
    passwordRequired: string;
    usernameTaken: string;
    missingFields: string;
    invalidEmail: string;
    passwordTooShort: string;
    userExists: string;
    registerSuccess: string;
    registerFailed: string;
    invalidName: string;
    passwordTooWeak: string;
    registerSuccessButEmailRateLimit: string;
  };
  settings: {
    pageTitle: string;
    pageDescription: string;
    settings: string;
    profile: string;
    account: string;
    security: string;
    notifications: string;
    appearance: string;
    profileInfo: string;
    profileDescription: string;
    name: string;
    username: string;
    email: string;
    bio: string;
    bioPlaceholder: string;
    location: string;
    website: string;
    twitter: string;
    github: string;
    linkedin: string;
    save: string;
    saving: string;
    cancel: string;
    saveSuccess: string;
    saveError: string;
    securitySettings: string;
    securityDescription: string;
    changePassword: string;
    currentPassword: string;
    newPassword: string;
    confirmPassword: string;
    passwordRequirements: string;
    updatePassword: string;
    updating: string;
    passwordUpdated: string;
    passwordError: string;
    passwordMismatch: string;
    twoFactor: string;
    twoFactorDescription: string;
    enable: string;
    disable: string;
    enabled: string;
    disabled: string;
    confirm2FADisable: string;
    twoFactorDisabled: string;
    twoFactorError: string;
    backupCodesWarning: string;
    backupCodesDescription: string;
    activeSessions: string;
    activeSessionsDescription: string;
    currentSession: string;
    revokeSession: string;
    revokeAll: string;
    setup2FA: string;
    scan2FAQR: string;
    manualEntry: string;
    next: string;
    back: string;
    enter2FACode: string;
    verificationCode: string;
    verify: string;
    verifying: string;
    invalid2FACode: string;
    twoFactorEnabled: string;
    saveBackupCodes: string;
    copied: string;
    copy: string;
    download: string;
    done: string;
    oauthPasswordNotAvailable: string;
    backupCodesTitle: string;
    backupCodesNote: string;
    disableTwoFactor: string;
    disableTwoFactorDescription: string;
    password: string;
    enterPassword: string;
    enterCodeFromApp: string;
    enterBackupCode: string;
    warning: string;
    disableTwoFactorWarning: string;
    disabling: string;
    passwordRequired: string;
    currentDevice: string;
    lastActiveNow: string;
    success: string;
    error: string;
    ok: string;
    qrCodeError: string;
    selectImageFile: string;
    imageSizeLimit: string;
    avatarUpdated: string;
    avatarUploadError: string;
    noAvatarToDelete: string;
    confirmDeleteAvatar: string;
    avatarDeleted: string;
    avatarDeleteError: string;
    profilePicture: string;
    chooseImage: string;
    uploading: string;
    upload: string;
    deleting: string;
    deleteAvatar: string;
    imageRequirements: string;
    clearSelection: string;
    confirmDeleteAvatarTitle: string;
    delete: string;
    processing: string;
  };
  posts: {
    title: string;
    createPost: string;
    editPost: string;
    deletePost: string;
    viewPost: string;
    noPosts: string;
    loadMore: string;

    form: {
      title: string;
      titlePlaceholder: string;
      slug: string;
      slugPlaceholder: string;
      excerpt: string;
      excerptPlaceholder: string;
      content: string;
      contentPlaceholder: string;
      featuredImage: string;
      category: string;
      selectCategory: string;
      tags: string;
      selectTags: string;
      metaTitle: string;
      metaDescription: string;
      metaKeywords: string;

      layoutType: string;
      selectLayout: string;

      status: string;
      statusDraft: string;
      statusPublished: string;
      statusScheduled: string;
      statusArchived: string;

      visibility: string;
      publicPost: string;
      unlistedPost: string;
      privatePost: string;
      passwordProtected: string;
      restrictedPost: string;

      password: string;
      allowedUsers: string;

      featuredPost: string;
      pinnedPost: string;

      publishNow: string;
      scheduleFor: string;
      saveDraft: string;
      update: string;
      publish: string;
      schedule: string;

      requiredField: string;
      minLength: string | ((params: { count: number }) => string);
    };

    filters: {
      search: string;
      filterByStatus: string;
      filterByType: string;
      filterByCategory: string;
      filterByTags: string;
      filterByAuthor: string;
      filterByDate: string;
      dateFrom: string;
      dateTo: string;
      showFeatured: string;
      showPinned: string;
      clearFilters: string;
      applyFilters: string;
    };

    sort: {
      sortBy: string;
      newest: string;
      oldest: string;
      mostViewed: string;
      title: string;
      updated: string;
    };

    list: {
      views: string;
      comments: string;
      published: string;
      updated: string;
      author: string;
      actions: string;
      edit: string;
      delete: string;
      duplicate: string;
      preview: string;
      analytics: string;
    };

    detail: {
      readTime: string | ((params: { minutes: number }) => string);
      publishedOn: string;
      updatedOn: string;
      by: string;
      share: string;
      favorite: string;
      report: string;
      relatedPosts: string;
      comments: string;
      leaveComment: string;
      passwordRequired: string;
      enterPassword: string;
      submit: string;
      accessDenied: string;
      accessDeniedMessage: string;
    };

    actions: {
      publishing: string;
      published: string;
      saving: string;
      saved: string;
      deleting: string;
      deleted: string;
      scheduling: string;
      scheduled: string;
      error: string;
      confirmDelete: string;
      confirmDeleteMessage: string;
      cancel: string;
      confirm: string;
    };

    types: {
      article: string;
      gallery: string;
      video: string;
      snippet: string;
      document: string;
      portfolio: string;
      link: string;
    };

    analytics: {
      overview: string;
      totalViews: string;
      uniqueViews: string;
      avgReadTime: string;
      likes: string;
      favorites: string;
      shares: string;
      comments: string;
      viewsByDate: string;
      topReferrers: string;
      engagement: string;
    };

    translation: {
      translate: string;
      translations: string;
      addTranslation: string;
      selectLanguage: string;
      translating: string;
      translationComplete: string;
      translationFailed: string;
      aiTranslation: string;
      manualTranslation: string;
      viewTranslation: string;
    };

    media: {
      uploadMedia: string;
      selectMedia: string;
      mediaLibrary: string;
      dragDrop: string;
      or: string;
      browse: string;
      uploading: string;
      uploaded: string;
      uploadFailed: string;
      maxFileSize: string | ((params: { size: number }) => string);
      supportedFormats: string;
      alt: string;
      caption: string;
      remove: string;
    };

    comments: {
      title: string;
      noComments: string;
      beFirst: string;
      writeComment: string;
      reply: string;
      edit: string;
      delete: string;
      report: string;
      posting: string;
      posted: string;
      updated: string;
      deleted: string;
      showReplies: string | ((params: { count: number }) => string);
      hideReplies: string;
      sortBy: string;
      newest: string;
      oldest: string;
      topRated: string;
    };

    seo: {
      seoSettings: string;
      metaTitle: string;
      metaTitlePlaceholder: string;
      metaDescription: string;
      metaDescriptionPlaceholder: string;
      metaKeywords: string;
      metaKeywordsPlaceholder: string;
      ogImage: string;
      ogImageDescription: string;
      previewGoogle: string;
      previewFacebook: string;
      previewTwitter: string;
      seoScore: string;
      recommendations: string;
    };

    schedule: {
      schedulePost: string;
      selectDateTime: string;
      timezone: string;
      scheduledFor: string;
      cancelSchedule: string;
      reschedule: string;
    };

    revisions: {
      revisions: string;
      noRevisions: string;
      viewRevision: string;
      restoreRevision: string;
      compareRevisions: string;
      savedOn: string;
      by: string;
    };
  };
  blog: {
    title: string;
    pageDescription: string;
    allPosts: string;
    searchResults: string;
    postsFound: string;
    postFound: string;
    latest: string;
    mostViewed: string;
    trending: string;
    category: string;
    tag: string;
    type: string;
    search: string;
    noPostsFound: string;
    readMore: string;
    readingTime: string;
    views: string;
    featured: string;
    filterBy: string;
    sortBy: string;
    allCategories: string;
    allTags: string;
    allTypes: string;
    publishedOn: string;
    updatedOn: string;
    tags: string;
    relatedPosts: string;
    tableOfContents: string;
    comments: string;
    leaveComment: string;
    noComments: string;
    aboutAuthor: string;
    viewProfile: string;
    moreFromAuthor: string;
    loginToComment: string;
    notFound: string;
    passwordRequired: string;
    passwordDescription: string;
    passwordLabel: string;
    passwordPlaceholder: string;
    incorrectPassword: string;
    types: {
      article: string;
      gallery: string;
      video: string;
      document: string;
      snippet: string;
      portfolio: string;
      link: string;
    };
  };
  api: {
    snippet: {
      notFound: string;
      unauthorized: string;
      forbidden: string;
      forbiddenEdit: string;
      forbiddenDelete: string;
      fetchFailed: string;
      updateFailed: string;
      deleteFailed: string;
      alreadyFavorited: string;
      favoriteFailed: string;
      unfavoriteFailed: string;
    };
    analyzeComplexity: {
      noCodeProvided: string;
      failedToAnalyze: string;
      o1: string;
      oLogN: string;
      oN: string;
      oNLogN: string;
      oN2: string;
      oN3: string;
      o2N: string;
      unknownComplexity: string;
      note: string;
    };
    language: {
      invalidLangId: string;
    };
    errors: {
      fetchLanguagesFailed: string;
      searchFailed: string;
      requiredQuery: string;
      fetchSnippetsFailed: string;
      fetchTagsFailed: string;
      waitContact: string;
    };
    upload: {
      unauthorized: string;
      noFileProvided: string;
      fileTooLarge: string | ((params: { maxSize: string }) => string);
      invalidFileType: string;
      failedToUpload: string;
      uploadSuccess: string;
    };
  };
  email: {
    verificationEmailSubject: string;
    resetEmailSubject: string;
  };
}

export type TranslateDictionariesProps = {
  [key in LocaleProps]: DictionaryStructure;
};
